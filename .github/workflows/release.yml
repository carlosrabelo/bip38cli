name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          mkdir -p dist
          cd core
          go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o ../dist/bip38cli ./cmd/bip38cli

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/bip38cli
          generate_release_notes: true

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.prepare.outputs.version }}
          BUILD_TIME: ${{ needs.prepare.outputs.build_time }}
        run: |
          mkdir -p dist
          
          BINARY_NAME="bip38cli"
          if [[ "$GOOS" == "windows" ]]; then
            BINARY_NAME="bip38cli.exe"
          fi
          
          cd core
          go build -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME" \
            -o "../dist/${BINARY_NAME}" \
            ./cmd/bip38cli

      - name: Create archive
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          cd dist
          
          BINARY_NAME="bip38cli"
          if [[ "$GOOS" == "windows" ]]; then
            BINARY_NAME="bip38cli.exe"
            ARCHIVE_NAME="bip38cli-${VERSION}-${GOOS}-${GOARCH}.zip"
            zip "$ARCHIVE_NAME" "$BINARY_NAME"
          else
            ARCHIVE_NAME="bip38cli-${VERSION}-${GOOS}-${GOARCH}.tar.gz"
            tar -czf "$ARCHIVE_NAME" "$BINARY_NAME"
          fi
          
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bip38cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/${{ env.archive_name }}

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          name: ${{ needs.prepare.outputs.release_name }}
          body: |
            ## BIP38CLI ${{ needs.prepare.outputs.version }}
            
            A command-line tool for BIP38 Bitcoin private key encryption.
            
            ### Downloads
            Choose the appropriate binary for your platform:
            
            - **Linux (amd64)**: `bip38cli-${{ needs.prepare.outputs.version }}-linux-amd64.tar.gz`
            - **Linux (arm64)**: `bip38cli-${{ needs.prepare.outputs.version }}-linux-arm64.tar.gz`
            - **macOS (Intel)**: `bip38cli-${{ needs.prepare.outputs.version }}-darwin-amd64.tar.gz`
            - **macOS (Apple Silicon)**: `bip38cli-${{ needs.prepare.outputs.version }}-darwin-arm64.tar.gz`
            - **Windows (amd64)**: `bip38cli-${{ needs.prepare.outputs.version }}-windows-amd64.zip`
            
            ### Installation
            
            **Linux/macOS:**
            ```bash
            # Download and extract
            wget https://github.com/carlosrabelo/bip38cli/releases/download/${{ needs.prepare.outputs.version }}/bip38cli-${{ needs.prepare.outputs.version }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m).tar.gz
            tar -xzf bip38cli-${{ needs.prepare.outputs.version }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m).tar.gz
            
            # Install to /usr/local/bin
            sudo mv bip38cli /usr/local/bin/
            
            # Or install to user directory
            mkdir -p ~/.local/bin
            mv bip38cli ~/.local/bin/
            export PATH="$HOME/.local/bin:$PATH"
            ```
            
            **Windows:**
            ```powershell
            # Download and extract
            Invoke-WebRequest -Uri "https://github.com/carlosrabelo/bip38cli/releases/download/${{ needs.prepare.outputs.version }}/bip38cli-${{ needs.prepare.outputs.version }}-windows-amd64.zip" -OutFile "bip38cli.zip"
            Expand-Archive -Path "bip38cli.zip" -DestinationPath "."
            
            # Add to PATH or move to desired location
            ```
            
            ### Verification
            
            ```bash
            bip38cli --version
            # Expected output: bip38cli ${{ needs.prepare.outputs.version }} (built: ${{ needs.prepare.outputs.build_time }})
            ```
            
            ### Changelog
            
            ${{ needs.prepare.outputs.release_type == 'prerelease' && 'This is a prerelease version for testing purposes.' || 'Stable release with the latest features and bug fixes.' }}
            
            ---
            
            Build time: ${{ needs.prepare.outputs.build_time }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
